basePath: /
definitions:
  domain.UserSubscription:
    properties:
      end_date:
        type: string
      id:
        type: string
      price:
        type: integer
      service_name:
        type: string
      start_date:
        type: string
      user_id:
        type: string
    type: object
  dto.CreateUserSubDTO:
    properties:
      end_date:
        type: string
      price:
        minimum: 0
        type: integer
      service_name:
        maxLength: 255
        minLength: 3
        type: string
      start_date:
        type: string
      user_id:
        type: string
    required:
    - start_date
    - user_id
    type: object
  dto.TotalCost:
    properties:
      end_date:
        type: string
      service_name:
        maxLength: 255
        minLength: 3
        type: string
      start_date:
        type: string
      user_id:
        type: string
    required:
    - start_date
    - user_id
    type: object
  dto.UpdateUserSubDTO:
    properties:
      end_date:
        type: string
      id:
        type: integer
      price:
        minimum: 0
        type: integer
      service_name:
        maxLength: 255
        minLength: 3
        type: string
      start_date:
        type: string
      user_id:
        type: string
    required:
    - start_date
    - user_id
    type: object
  handler.CreateResponse:
    properties:
      id:
        type: integer
      message:
        type: string
    type: object
  handler.DeleteResponse:
    properties:
      id:
        type: integer
      message:
        type: string
    type: object
  handler.TotalCostResponse:
    properties:
      total_cost:
        type: integer
    type: object
  resp.ErrorResponse:
    properties:
      error:
        type: string
      status:
        type: integer
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a sample REST API server.
  title: User Subscription REST API Server
  version: "1.0"
paths:
  /subscriptions:
    get:
      consumes:
      - application/json
      description: Returns a list of a user's subscriptions by their UUID
      parameters:
      - description: User UUID
        in: query
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.UserSubscription'
            type: array
        "400":
          description: Invalid UUID or missing parameter
          schema:
            $ref: '#/definitions/resp.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/resp.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/resp.ErrorResponse'
      summary: Get list of user subscriptions
    post:
      consumes:
      - application/json
      description: Adding user subscription to the database.
      parameters:
      - description: Data for creating a user subscription
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserSubDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Subscription created successfully
          schema:
            $ref: '#/definitions/handler.CreateResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/resp.ErrorResponse'
        "409":
          description: User subscription already exists
          schema:
            $ref: '#/definitions/resp.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/resp.ErrorResponse'
      summary: Add user subscription
  /subscriptions/{id}:
    delete:
      description: Deletes a user subscription by ID
      parameters:
      - description: User subscription ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.DeleteResponse'
        "400":
          description: Invalid ID
          schema:
            $ref: '#/definitions/resp.ErrorResponse'
        "404":
          description: User ubscription not found
          schema:
            $ref: '#/definitions/resp.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/resp.ErrorResponse'
      summary: Delete user subscription
    get:
      description: Returns information about a user's subscription by its ID
      parameters:
      - description: Subscription ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Request data
          schema:
            $ref: '#/definitions/domain.UserSubscription'
        "400":
          description: Invalid ID
          schema:
            $ref: '#/definitions/resp.ErrorResponse'
        "404":
          description: User subscription not found
          schema:
            $ref: '#/definitions/resp.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/resp.ErrorResponse'
      summary: Get user subscription
    put:
      consumes:
      - application/json
      description: Updates a user's subscription data by its ID
      parameters:
      - description: Subscription ID
        in: path
        name: id
        required: true
        type: integer
      - description: Data for updating the subscription
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserSubDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.UserSubscription'
        "400":
          description: Invalid ID or request body
          schema:
            $ref: '#/definitions/resp.ErrorResponse'
        "500":
          description: Error updating subscription
          schema:
            $ref: '#/definitions/resp.ErrorResponse'
      summary: Update user subscription
  /subscriptions/total_cost:
    get:
      consumes:
      - application/json
      description: Returns the total cost of a user's subscriptions for the specified
        period
      parameters:
      - description: Request data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.TotalCost'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.TotalCostResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/resp.ErrorResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/resp.ErrorResponse'
      summary: Get total user subscription cost
swagger: "2.0"
